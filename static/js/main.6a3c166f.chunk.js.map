{"version":3,"sources":["Components/form.js","Components/Navbar.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["form","props","_useState","useState","_useState2","Object","slicedToArray","text","setText","console","log","length","countword","_useState3","_useState4","btntxt","setbtntxt","split","filter","element","react_default","a","createElement","className","concat","mode","heading","style","backgroundColor","color","id","rows","value","onChange","event","target","background","onClick","newtext","toUpperCase","showalert","toLowerCase","txt","document","getElementById","select","navigator","clipboard","writeText","join","Navbar","href","title","type","data-bs-hrefggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-current","hrefgglemode","role","htmlFor","Alert","alert","message","App","setmode","settxt","_useState5","_useState6","setalert","setTimeout","Fragment","togglemode","body","form_form","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.6a3c166f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function form(props) {\r\n  const [text,setText]=useState(\"\");\r\n  console.log(text.length);\r\n  const [btntxt,setbtntxt]=useState(\"change to uppercase\");\r\n  const handlecase= ()=>{\r\n    if(btntxt===\"change to uppercase\")\r\n    {\r\n    const newtext=text.toUpperCase();\r\n    setText(newtext);\r\n    {\r\n      if(text.length!==0)\r\n      {\r\n        props.showalert('text has been changed to uppercase','success');\r\n      }\r\n      else{\r\n        props.showalert('nothing here to make change','warning')\r\n      }\r\n    }\r\n    setbtntxt(\"change to lowercase\");\r\n    }\r\n    else{\r\n    const newtext=text.toLowerCase();\r\n    setText(newtext);\r\n    {\r\n      if(text.length!==0)\r\n      {\r\n        props.showalert('text has been changed to lowercase','success');\r\n      }\r\n      else{\r\n        props.showalert('nothing here to make change','warning')\r\n      }\r\n    }\r\n    setbtntxt(\"change to uppercase\");\r\n    }\r\n  }\r\n  \r\n  const handleCleartext= ()=>{\r\n    \r\n    {\r\n      if(text.length!==0)\r\n      {\r\n        props.showalert('text has been cleared','success');\r\n      }\r\n      else{\r\n        props.showalert('already cleared','success')\r\n      }\r\n    }\r\n    const newtext='';\r\n    setText(newtext);\r\n  }\r\n  const handleOnchange= (event)=>{\r\n  setText(event.target.value);\r\n  }\r\n  \r\n let countword;\r\n countword=text.split(/\\s+/).filter((element)=>{return element.length!==0}).length;\r\n  \r\n const handlecopy=()=>{\r\n  var txt=document.getElementById(\"myBox\");\r\n  txt.select();\r\n  navigator.clipboard.writeText(txt.value);\r\n  // {props.showalert('text has been copied to clipboard','success')?text.length!==null:props.showalert('nothing to copy write someshing in textbox','success')};\r\n  {\r\n    if(text.length!==0)\r\n    {\r\n      props.showalert('text has been copied to clipboard','success');\r\n    }\r\n    else{\r\n      props.showalert('nothing here to copy write something in textbox','warning')\r\n    }\r\n  }\r\n}\r\n const removespace=()=>{\r\n  let newtext=text.split(/[ ]+/);\r\n  setText(newtext.join(\" \"));\r\n  {\r\n    if(text.length!==0)\r\n    {\r\n      props.showalert('extra space has been removed','success');\r\n    }\r\n    else{\r\n      props.showalert('nothing here to make change','warning')\r\n    }\r\n  }\r\n }\r\n\r\n\r\n  return (\r\n  \r\n    <div>\r\n      \r\n      <h3 className={`text-${props.mode==='dark'?'light':'dark'}`}>{props.heading}</h3>\r\n      <div className=\"mb-3\">        \r\n        <textarea className=\"form-control\"style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\" value={text} onChange={handleOnchange}></textarea>\r\n        \r\n      </div>\r\n      <button className=\"btn mx-1 my-1\" style={{background:\"blue\", color:\"white\"}} onClick={handlecase}>{btntxt}</button>\r\n      <button className=\"btn mx-1 my-1\" style={{background:\"blue\", color:\"white\"}} onClick={handleCleartext}>clear text</button>\r\n      <button className=\"btn mx-1 my-1\" style={{background:\"blue\", color:\"white\"}}onClick={handlecopy}>copy text</button>\r\n      <button className=\"btn mx-1 my-1\" style={{background:\"blue\", color:\"white\"}}onClick={removespace}>remove extra space</button>\r\n    <div className=\"my-5\">\r\n      <h3 className={`text-${props.mode==='dark'?'light':'dark'}`}>word count</h3>\r\n      <p className={`text-${props.mode==='dark'?'light':'dark'}`}>{countword} words {text.length} characters</p>\r\n    </div>\r\n    </div>\r\n  )\r\n}","import React,{useState} from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n  \r\n  return (\r\n    <div className={`text-${props.mode==='dark'?'light':'dark'}`}>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <buthrefn className=\"navbar-hrefggler\" type=\"buthrefn\" data-bs-hrefggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"hrefggle navigation\">\r\n      <span className=\"navbar-hrefggler-icon\"></span>\r\n    </buthrefn>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auhref mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-a active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-a\" href=\"#\">link</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-a active\" aria-current=\"page\"href=\"#\">About</a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"form-check form-switch\">\r\n      <input className=\"form-check-input\" onClick={props.hrefgglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.txt}</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    </div>\r\n  )\r\n}\r\n// Navbar.propTypes={\r\n//   title: PropTypes.string.isRequired\r\n// };\r\n// Navbar.defaultProps={\r\n//   title:'set title'\r\n// };\r\n","import React from 'react'\r\n\r\nexport default function (props) {\r\n  return (\r\n    \r\n    props.alert &&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{props.alert.type}</strong> : {props.alert.message}\r\n  </div>\r\n    \r\n  )\r\n}\r\n","import './App.css';\nimport React, { useState } from 'react';\nimport Form from './Components/form';\nimport Navbar from './Components/Navbar';\nimport Alert from './Components/Alert';\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [txt, settxt] = useState('enable dark mode');\n  const togglemode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n      settxt('disable dark mode');\n      document.body.style.backgroundColor = 'grey';\n      showalert('dark mode has been enabled', 'success');\n    }\n    else {\n      setmode('light');\n      settxt('enable dark mode');\n      document.body.style.backgroundColor = \"white\";\n      showalert('dark mode has been disabled', 'success');\n    }\n  }\n  const [alert, setalert] = useState(null);\n  const showalert = (message, type) => {\n    setalert({\n      message: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1500)\n  }\n  return (\n    <>       \n        <Navbar mode={mode} togglemode={togglemode} txt={txt} />\n        <Alert alert={alert} />\n        <div className=\"container\">\n          <Form heading=\"enter the text\" mode={mode} showalert={showalert} />\n        </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}